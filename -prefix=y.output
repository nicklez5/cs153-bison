Nonterminals useless in grammar

   var
   block
   declaration
   begin_program
   end_program
   program
   array
   colon
   term
   semicolon
   comma
   assign
   comp
   l_paren
   r_paren
   if
   else
   read
   do
   true
   false
   not
   beginloop
   endloop
   continue
   while
   of
   and
   or
   write
   then
   endif
   mult_exp
   expression
   relation_exp
   relation_and_exp
   bool_exp
   statement


Terminals unused in grammar

   IDENT
   INTEGER
   EQ
   NEQ
   LT
   GT
   LTE
   GTE
   SEMICOLON
   COLON
   COMMA
   ASSIGN
   ENDLOOP
   CONTINUE
   READ
   WRITE
   error_1
   error_2
   error_3
   COMMENT
   IF
   NOT
   FALSE
   END_PROGRAM
   ENDIF
   ELSE
   DO
   BEGIN_PROGRAM
   ARRAY
   AND
   WHILE
   TRUE
   THEN
   PROGRAM
   OR
   OF
   BEGINLOOP


Rules useless in grammar

   12 var: IDENT
   13    | IDENT L_PAREN exp R_PAREN

   14 block: declaration SEMICOLON BEGIN_PROGRAM statement SEMICOLON

   15 declaration: IDENT COMMA IDENT COLON ARRAY L_PAREN NUMBER R_PAREN OF NUMBER
   16            | IDENT COMMA IDENT COLON NUMBER
   17            | IDENT COLON NUMBER

   18 begin_program: BEGIN_PROGRAM

   19 end_program: END_PROGRAM

   20 program: PROGRAM

   21 array: ARRAY

   22 colon: COLON

   23 term: var
   24     | NUMBER
   25     | SUB NUMBER
   26     | L_PAREN exp R_PAREN
   27     | SUB L_PAREN exp R_PAREN

   28 semicolon: SEMICOLON

   29 comma: COMMA

   30 assign: ASSIGN

   31 comp: EQ
   32     | NEQ
   33     | LT
   34     | GT
   35     | LTE
   36     | GTE

   37 l_paren: L_PAREN

   38 r_paren: R_PAREN

   39 if: IF

   40 else: ELSE

   41 read: READ

   42 do: DO

   43 true: TRUE

   44 false: FALSE

   45 not: NOT

   46 beginloop: BEGINLOOP

   47 endloop: ENDLOOP

   48 continue: CONTINUE

   49 while: WHILE

   50 of: OF

   51 and: AND

   52 or: OR

   53 write: WRITE

   54 then: THEN

   55 endif: ENDIF

   56 mult_exp: term MULT term
   57         | term DIV term
   58         | term MOD term
   59         | term

   60 expression: mult_exp
   61           | mult_exp PLUS mult_exp
   62           | mult_exp SUB mult_exp

   63 relation_exp: TRUE
   64             | FALSE
   65             | expression comp expression
   66             | NOT expression comp expression
   67             | NOT TRUE
   68             | NOT FALSE
   69             | L_PAREN bool_exp R_PAREN
   70             | not L_PAREN bool_exp R_PAREN

   71 relation_and_exp: relation_exp
   72                 | relation_exp AND relation_exp

   73 bool_exp: relation_and_exp
   74         | relation_and_exp OR relation_and_exp

   75 statement: var ASSIGN expression
   76          | IF bool_exp THEN statement SEMICOLON ENDIF
   77          | IF bool_exp THEN statement SEMICOLON ELSE statement SEMICOLON ENDIF
   78          | WHILE bool_exp BEGINLOOP statement SEMICOLON ENDLOOP
   79          | DO BEGINLOOP statement SEMICOLON ENDLOOP WHILE bool_exp
   80          | READ var
   81          | READ var COMMA var
   82          | WRITE var
   83          | WRITE var COMMA var
   84          | CONTINUE


State 9 conflicts: 2 shift/reduce
State 17 conflicts: 2 shift/reduce
State 18 conflicts: 2 shift/reduce
State 19 conflicts: 2 shift/reduce
State 20 conflicts: 5 shift/reduce
State 22 conflicts: 5 shift/reduce


Grammar

    0 $accept: input $end

    1 input: %empty
    2      | input line

    3 line: exp EQUAL END

    4 exp: NUMBER
    5    | exp PLUS exp
    6    | exp MULT exp
    7    | exp DIV exp
    8    | exp SUB exp
    9    | exp MOD exp
   10    | L_PAREN exp R_PAREN
   11    | MINUS exp


Terminals, with rules where they appear

$end (0) 0
error (256)
NUMBER (258) 4
IDENT (259)
MULT (260) 6
DIV (261) 7
PLUS (262) 5
INTEGER (263)
SUB (264) 8
EQUAL (265) 3
L_PAREN (266) 10
R_PAREN (267) 10
END (268) 3
MOD (269) 9
EQ (270)
NEQ (271)
LT (272)
GT (273)
LTE (274)
GTE (275)
SEMICOLON (276)
COLON (277)
COMMA (278)
ASSIGN (279)
ENDLOOP (280)
CONTINUE (281)
READ (282)
WRITE (283)
error_1 (284)
error_2 (285)
error_3 (286)
COMMENT (287)
IF (288)
NOT (289)
FALSE (290)
END_PROGRAM (291)
ENDIF (292)
ELSE (293)
DO (294)
BEGIN_PROGRAM (295)
ARRAY (296)
AND (297)
WHILE (298)
TRUE (299)
THEN (300)
PROGRAM (301)
OR (302)
OF (303)
BEGINLOOP (304)
MINUS (305) 11
UMINUS (306)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
input (53)
    on left: 1 2, on right: 0 2
line (54)
    on left: 3, on right: 2
exp (55)
    on left: 4 5 6 7 8 9 10 11, on right: 3 5 6 7 8 9 10 11


State 0

    0 $accept: . input $end

    $default  reduce using rule 1 (input)

    input  go to state 1


State 1

    0 $accept: input . $end
    2 input: input . line

    $end     shift, and go to state 2
    NUMBER   shift, and go to state 3
    L_PAREN  shift, and go to state 4
    MINUS    shift, and go to state 5

    line  go to state 6
    exp   go to state 7


State 2

    0 $accept: input $end .

    $default  accept


State 3

    4 exp: NUMBER .

    $default  reduce using rule 4 (exp)


State 4

   10 exp: L_PAREN . exp R_PAREN

    NUMBER   shift, and go to state 3
    L_PAREN  shift, and go to state 4
    MINUS    shift, and go to state 5

    exp  go to state 8


State 5

   11 exp: MINUS . exp

    NUMBER   shift, and go to state 3
    L_PAREN  shift, and go to state 4
    MINUS    shift, and go to state 5

    exp  go to state 9


State 6

    2 input: input line .

    $default  reduce using rule 2 (input)


State 7

    3 line: exp . EQUAL END
    5 exp: exp . PLUS exp
    6    | exp . MULT exp
    7    | exp . DIV exp
    8    | exp . SUB exp
    9    | exp . MOD exp

    MULT   shift, and go to state 10
    DIV    shift, and go to state 11
    PLUS   shift, and go to state 12
    SUB    shift, and go to state 13
    EQUAL  shift, and go to state 14
    MOD    shift, and go to state 15


State 8

    5 exp: exp . PLUS exp
    6    | exp . MULT exp
    7    | exp . DIV exp
    8    | exp . SUB exp
    9    | exp . MOD exp
   10    | L_PAREN exp . R_PAREN

    MULT     shift, and go to state 10
    DIV      shift, and go to state 11
    PLUS     shift, and go to state 12
    SUB      shift, and go to state 13
    R_PAREN  shift, and go to state 16
    MOD      shift, and go to state 15


State 9

    5 exp: exp . PLUS exp
    6    | exp . MULT exp
    7    | exp . DIV exp
    8    | exp . SUB exp
    9    | exp . MOD exp
   11    | MINUS exp .

    SUB  shift, and go to state 13
    MOD  shift, and go to state 15

    SUB       [reduce using rule 11 (exp)]
    MOD       [reduce using rule 11 (exp)]
    $default  reduce using rule 11 (exp)


State 10

    6 exp: exp MULT . exp

    NUMBER   shift, and go to state 3
    L_PAREN  shift, and go to state 4
    MINUS    shift, and go to state 5

    exp  go to state 17


State 11

    7 exp: exp DIV . exp

    NUMBER   shift, and go to state 3
    L_PAREN  shift, and go to state 4
    MINUS    shift, and go to state 5

    exp  go to state 18


State 12

    5 exp: exp PLUS . exp

    NUMBER   shift, and go to state 3
    L_PAREN  shift, and go to state 4
    MINUS    shift, and go to state 5

    exp  go to state 19


State 13

    8 exp: exp SUB . exp

    NUMBER   shift, and go to state 3
    L_PAREN  shift, and go to state 4
    MINUS    shift, and go to state 5

    exp  go to state 20


State 14

    3 line: exp EQUAL . END

    END  shift, and go to state 21


State 15

    9 exp: exp MOD . exp

    NUMBER   shift, and go to state 3
    L_PAREN  shift, and go to state 4
    MINUS    shift, and go to state 5

    exp  go to state 22


State 16

   10 exp: L_PAREN exp R_PAREN .

    $default  reduce using rule 10 (exp)


State 17

    5 exp: exp . PLUS exp
    6    | exp . MULT exp
    6    | exp MULT exp .
    7    | exp . DIV exp
    8    | exp . SUB exp
    9    | exp . MOD exp

    SUB  shift, and go to state 13
    MOD  shift, and go to state 15

    SUB       [reduce using rule 6 (exp)]
    MOD       [reduce using rule 6 (exp)]
    $default  reduce using rule 6 (exp)


State 18

    5 exp: exp . PLUS exp
    6    | exp . MULT exp
    7    | exp . DIV exp
    7    | exp DIV exp .
    8    | exp . SUB exp
    9    | exp . MOD exp

    SUB  shift, and go to state 13
    MOD  shift, and go to state 15

    SUB       [reduce using rule 7 (exp)]
    MOD       [reduce using rule 7 (exp)]
    $default  reduce using rule 7 (exp)


State 19

    5 exp: exp . PLUS exp
    5    | exp PLUS exp .
    6    | exp . MULT exp
    7    | exp . DIV exp
    8    | exp . SUB exp
    9    | exp . MOD exp

    MULT  shift, and go to state 10
    DIV   shift, and go to state 11
    SUB   shift, and go to state 13
    MOD   shift, and go to state 15

    SUB       [reduce using rule 5 (exp)]
    MOD       [reduce using rule 5 (exp)]
    $default  reduce using rule 5 (exp)


State 20

    5 exp: exp . PLUS exp
    6    | exp . MULT exp
    7    | exp . DIV exp
    8    | exp . SUB exp
    8    | exp SUB exp .
    9    | exp . MOD exp

    MULT  shift, and go to state 10
    DIV   shift, and go to state 11
    PLUS  shift, and go to state 12
    SUB   shift, and go to state 13
    MOD   shift, and go to state 15

    MULT      [reduce using rule 8 (exp)]
    DIV       [reduce using rule 8 (exp)]
    PLUS      [reduce using rule 8 (exp)]
    SUB       [reduce using rule 8 (exp)]
    MOD       [reduce using rule 8 (exp)]
    $default  reduce using rule 8 (exp)


State 21

    3 line: exp EQUAL END .

    $default  reduce using rule 3 (line)


State 22

    5 exp: exp . PLUS exp
    6    | exp . MULT exp
    7    | exp . DIV exp
    8    | exp . SUB exp
    9    | exp . MOD exp
    9    | exp MOD exp .

    MULT  shift, and go to state 10
    DIV   shift, and go to state 11
    PLUS  shift, and go to state 12
    SUB   shift, and go to state 13
    MOD   shift, and go to state 15

    MULT      [reduce using rule 9 (exp)]
    DIV       [reduce using rule 9 (exp)]
    PLUS      [reduce using rule 9 (exp)]
    SUB       [reduce using rule 9 (exp)]
    MOD       [reduce using rule 9 (exp)]
    $default  reduce using rule 9 (exp)
