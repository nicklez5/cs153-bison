Nonterminals useless in grammar

   block
   block_helper
   declaration
   declaration_helper
   statement
   expression_statement
   ifelse_statement
   while_statement
   dobegin_statement
   readwrite_statement
   readwrite_helper
   continue_statement
   statement_helper
   bool_exp
   relation_and_exp2
   relation_and_exp1
   relation_exp
   comp
   expression
   expression_helper
   mult_exp
   mult_exp_helper
   term
   var


Terminals unused in grammar

   NUMBER
   L_PAREN
   R_PAREN
   MINUS
   MULT
   DIV
   MOD
   PLUS
   SUB
   LT
   LTE
   GT
   GTE
   EQUAL
   EQ
   INTEGER
   NEQ
   NOT
   AND
   OR
   ASSIGN
   COMMENT
   END
   COLON
   COMMA
   ENDLOOP
   CONTINUE
   READ
   WRITE
   error_1
   error_2
   error_3
   IF
   FALSE
   END_PROGRAM
   ENDIF
   ELSE
   DO
   BEGIN_PROGRAM
   ARRAY
   WHILE
   TRUE
   THEN
   OF
   BEGINLOOP
   UMINUS


Rules useless in grammar

    2 block: block_helper BEGIN_PROGRAM statement_helper

    3 block_helper: declaration SEMICOLON

    4 declaration: declaration_helper COLON ARRAY L_PAREN NUMBER R_PAREN OF INTEGER
    5            | declaration_helper COLON INTEGER

    6 declaration_helper: IDENT
    7                   | COMMA

    8 statement: expression_statement
    9          | ifelse_statement
   10          | while_statement
   11          | dobegin_statement
   12          | readwrite_statement
   13          | continue_statement

   14 expression_statement: var ASSIGN expression

   15 ifelse_statement: IF bool_exp THEN statement_helper ENDIF
   16                 | IF bool_exp THEN statement_helper ELSE statement_helper ENDIF

   17 while_statement: WHILE bool_exp BEGINLOOP statement_helper ENDLOOP

   18 dobegin_statement: DO BEGINLOOP statement_helper ENDLOOP WHILE bool_exp

   19 readwrite_statement: READ readwrite_helper
   20                    | WRITE readwrite_helper

   21 readwrite_helper: COMMA
   22                 | var

   23 continue_statement: CONTINUE

   24 statement_helper: statement SEMICOLON

   25 bool_exp: relation_and_exp2

   26 relation_and_exp2: relation_and_exp1
   27                  | relation_and_exp1 OR relation_and_exp1

   28 relation_and_exp1: relation_exp AND relation_exp
   29                  | relation_exp

   30 relation_exp: TRUE
   31             | FALSE
   32             | expression comp expression
   33             | NOT expression comp expression
   34             | NOT TRUE
   35             | NOT FALSE
   36             | L_PAREN bool_exp R_PAREN
   37             | NOT L_PAREN bool_exp R_PAREN

   38 comp: EQ
   39     | NEQ
   40     | LT
   41     | GT
   42     | LTE
   43     | GTE

   44 expression: mult_exp
   45           | mult_exp expression_helper

   46 expression_helper: PLUS mult_exp
   47                  | SUB mult_exp

   48 mult_exp: term
   49         | term mult_exp_helper

   50 mult_exp_helper: MULT term
   51                | DIV term
   52                | MOD term

   53 term: var
   54     | MINUS var
   55     | NUMBER
   56     | MINUS NUMBER
   57     | L_PAREN expression R_PAREN
   58     | MINUS L_PAREN expression R_PAREN

   59 var: IDENT
   60    | IDENT L_PAREN expression R_PAREN


Grammar

    0 $accept: program $end

    1 program: PROGRAM IDENT SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
NUMBER (258)
IDENT (259) 1
L_PAREN (260)
R_PAREN (261)
MINUS (262)
MULT (263)
DIV (264)
MOD (265)
PLUS (266)
SUB (267)
LT (268)
LTE (269)
GT (270)
GTE (271)
EQUAL (272)
EQ (273)
INTEGER (274)
NEQ (275)
NOT (276)
AND (277)
OR (278)
ASSIGN (279)
COMMENT (280)
END (281)
SEMICOLON (282) 1
COLON (283)
COMMA (284)
ENDLOOP (285)
CONTINUE (286)
READ (287)
WRITE (288)
error_1 (289)
error_2 (290)
error_3 (291)
IF (292)
FALSE (293)
END_PROGRAM (294)
ENDIF (295)
ELSE (296)
DO (297)
BEGIN_PROGRAM (298)
ARRAY (299)
WHILE (300)
TRUE (301)
THEN (302)
PROGRAM (303) 1
OF (304)
BEGINLOOP (305)
UMINUS (306)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1, on right: 0


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . IDENT SEMICOLON

    IDENT  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM IDENT . SEMICOLON

    SEMICOLON  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: PROGRAM IDENT SEMICOLON .

    $default  reduce using rule 1 (program)
